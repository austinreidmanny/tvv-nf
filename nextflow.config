//----------------------------------------------------------------------------//
// Define params
//----------------------------------------------------------------------------//

// Input and output
params.reads = "data/*_R{1,2}.fastq.gz"
params.outputDirectory = "output"
params.phiX = "resources/phiX.fasta"
params.tvvDirectory = "resources/"

// Global settings
params.threads = "8"

// Diamond
params.diamondDB = "/n/data1/hms/mbib/nibert/austin/diamond/ncbi-viruses-bacteria-tv.dmnd"
params.blockSize = "10"

// Kraken
params.krakenDB = "/n/data1/hms/mbib/nibert/austin/tools/kraken2/kraken_viral_bacteria_tvv5_trich"

//----------------------------------------------------------------------------//
// Set up two profiles: running the pipeline locally vs. remotely
//----------------------------------------------------------------------------//
profiles {

    // Set up a profile for running the pipeline locally [the default]
    standard {

        // Set DIAMOND to be less resource intensive
        params.blockSize = '2'

        process {
            executor = "local"
            cache = "lenient"
            conda = "$baseDir/resources/conda.yml"
            cpus = params.threads
        }

        report {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.report.html"
        }

        timeline {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.timeline.html"
        }

        trace {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.trace.txt"
        }

        conda {
          // Where to save the conda environment so it doesn't need to be re-generated.
          cacheDir = "$baseDir/resources/cache"
        }
    }

    // Set up a profile for running on the cluster & specify the SLURM resources to be used for each job
    cluster {
        process {

          // Global setting
          executor = 'slurm'
          queue = 'short'
          cache = 'lenient'
          conda = "$baseDir/resources/conda.yml"

          // Error handling
          errorStrategy = 'retry'
          maxRetries = 3

          withName: trimAdapters {
              time   = { 30.m * task.attempt }
              memory = { 8.GB * task.attempt }
              cpus   = 1
              }

          withName: depletePhiX {
              time   =  { 30.m * task.attempt }
              memory = { 8.GB * task.attempt }
              cpus   = 8
              }

          withName: mapToTVV {
              time   = { 45.m * task.attempt }
              memory = { 8.GB * task.attempt }
              cpus   = 8
              }

          withName: fastqToFasta {
              time   = { 15.m * task.attempt }
              memory = { 4.GB * task.attempt }
              cpus   = 6
              }

          withName: deNovoAssembly {
              time   = { 60.m * task.attempt }
              memory = { 16.GB * task.attempt }
              cpus   = 8
              }

          withName: refineContigs {
              time   = { 2.h * task.attempt }
              memory = { 16.GB * task.attempt }
              cpus   = 8
              }

          withName: coverage {
              time   = { 60.m * task.attempt }
              memory = { 16.GB * task.attempt }
              cpus   = 8
              }

          withName: classification {
              time   = { 2.h * task.attempt }
              memory = { 50.GB * task.attempt }
              cpus   = 8
              }

          withName: taxonomy {
              time   = { 30.m * task.attempt }
              memory = { 8.GB * task.attempt }
              cpus   = 1
              }
        }

        executor {
          // Max jobs that Nextflow can submit at once (basically set to unlimited)
          queueSize = 10000
        }

        report {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.report.html"
        }

        timeline {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.timeline.html"
        }

        trace {
          enabled = true
          file = "$params.outputDirectory/reports/tvv-nf.trace.txt"
        }

        conda {
          // Where to save the conda environment so it doesn't need to be re-generated.
          cacheDir = "$baseDir/resources/cache"
        }
    }
}
